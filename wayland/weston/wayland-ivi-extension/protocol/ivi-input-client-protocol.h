/* Generated by wayland-scanner 1.11.0 */

#ifndef IVI_INPUT_CLIENT_PROTOCOL_H
#define IVI_INPUT_CLIENT_PROTOCOL_H

#include <stdint.h>
#include <stddef.h>
#include "wayland-client.h"

#ifdef  __cplusplus
extern "C" {
#endif

/**
 * @page page_ivi_input The ivi_input protocol
 * @section page_ifaces_ivi_input Interfaces
 * - @subpage page_iface_ivi_input - controller interface to the input system
 * @section page_copyright_ivi_input Copyright
 * <pre>
 *
 * Copyright (c) 2015 Codethink Ltd
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 * </pre>
 */
struct ivi_input;

/**
 * @page page_iface_ivi_input ivi_input
 * @section page_iface_ivi_input_desc Description
 *
 * This includes handling the existence of seats, seat capabilities,
 * seat acceptance and input focus.
 * @section page_iface_ivi_input_api API
 * See @ref iface_ivi_input.
 */
/**
 * @defgroup iface_ivi_input The ivi_input interface
 *
 * This includes handling the existence of seats, seat capabilities,
 * seat acceptance and input focus.
 */
extern const struct wl_interface ivi_input_interface;

/**
 * @ingroup iface_ivi_input
 * @struct ivi_input_listener
 */
struct ivi_input_listener {
	/**
	 * A new seat has appeared
	 *
	 * 
	 */
	void (*seat_created)(void *data,
			     struct ivi_input *ivi_input,
			     const char *name,
			     uint32_t capabilities);
	/**
	 * A seat's capabilities have changed
	 *
	 * 
	 */
	void (*seat_capabilities)(void *data,
				  struct ivi_input *ivi_input,
				  const char *name,
				  uint32_t capabilities);
	/**
	 * A seat is no longer available
	 *
	 * 
	 */
	void (*seat_destroyed)(void *data,
			       struct ivi_input *ivi_input,
			       const char *name);
	/**
	 * input focus of surface in ivi compositor has changed
	 *
	 * The new input focus state is provided in argument enabled: If
	 * enabled is ILM_TRUE, this surface now has input focus enabled.
	 * If enabled is not ILM_TRUE, this surface no longer has input
	 * focus.
	 */
	void (*input_focus)(void *data,
			    struct ivi_input *ivi_input,
			    uint32_t surface,
			    uint32_t device,
			    int32_t enabled);
	/**
	 * input acceptance has changed
	 *
	 * A surface has changed its input acceptance for a specific
	 * seat. If argument 'accepted' is ILM_TRUE, the surface now
	 * accepts the seat. If argument 'accepted' is not ILM_TRUE, the
	 * surface no longer accepts the seat.
	 */
	void (*input_acceptance)(void *data,
				 struct ivi_input *ivi_input,
				 uint32_t surface,
				 const char *seat,
				 int32_t accepted);
};

/**
 * @ingroup ivi_input_iface
 */
static inline int
ivi_input_add_listener(struct ivi_input *ivi_input,
		       const struct ivi_input_listener *listener, void *data)
{
	return wl_proxy_add_listener((struct wl_proxy *) ivi_input,
				     (void (**)(void)) listener, data);
}

#define IVI_INPUT_SET_INPUT_FOCUS	0
#define IVI_INPUT_SET_INPUT_ACCEPTANCE	1

/**
 * @ingroup iface_ivi_input
 */
#define IVI_INPUT_SET_INPUT_FOCUS_SINCE_VERSION	1
/**
 * @ingroup iface_ivi_input
 */
#define IVI_INPUT_SET_INPUT_ACCEPTANCE_SINCE_VERSION	1

/** @ingroup iface_ivi_input */
static inline void
ivi_input_set_user_data(struct ivi_input *ivi_input, void *user_data)
{
	wl_proxy_set_user_data((struct wl_proxy *) ivi_input, user_data);
}

/** @ingroup iface_ivi_input */
static inline void *
ivi_input_get_user_data(struct ivi_input *ivi_input)
{
	return wl_proxy_get_user_data((struct wl_proxy *) ivi_input);
}

static inline uint32_t
ivi_input_get_version(struct ivi_input *ivi_input)
{
	return wl_proxy_get_version((struct wl_proxy *) ivi_input);
}

/** @ingroup iface_ivi_input */
static inline void
ivi_input_destroy(struct ivi_input *ivi_input)
{
	wl_proxy_destroy((struct wl_proxy *) ivi_input);
}

/**
 * @ingroup iface_ivi_input
 *
 * Set input focus state of surface in ivi compositor. If the surface has input
 * focus, all non-graphical inputs (e.g. keyboard) are directed to the application
 * providing the content for this surface.
 * Multiple surfaces can have input focus at a time.
 * If argument enabled is ILM_TRUE, input focus for this surface is enabled.
 * If argument enabled is not ILM_TRUE, the input focus from this surface is removed.
 */
static inline void
ivi_input_set_input_focus(struct ivi_input *ivi_input, uint32_t surface, uint32_t device, int32_t enabled)
{
	wl_proxy_marshal((struct wl_proxy *) ivi_input,
			 IVI_INPUT_SET_INPUT_FOCUS, surface, device, enabled);
}

/**
 * @ingroup iface_ivi_input
 *
 * Set input acceptance of one seat for a surface. Surfaces may
 * accept input acceptance from multiple seats at once.
 * If argument 'accepted' is ILM_TRUE, the given seat's name will
 * be added to the list of accepted seats.
 * If argument 'accepted' is not ILM_TRUE, the given seat's name
 * will be removed from the list of accepted seats.
 */
static inline void
ivi_input_set_input_acceptance(struct ivi_input *ivi_input, uint32_t surface, const char *seat, int32_t accepted)
{
	wl_proxy_marshal((struct wl_proxy *) ivi_input,
			 IVI_INPUT_SET_INPUT_ACCEPTANCE, surface, seat, accepted);
}

#ifdef  __cplusplus
}
#endif

#endif
